x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://admin:admin123@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
  volumes:
    - ./airflow-data/dags:/opt/airflow/dags
    - ./airflow-data/logs:/opt/airflow/logs
    - ./airflow-data/plugins:/opt/airflow/plugins
    - ./airflow-data/config:/opt/airflow/config
    - ./sensor-data:/opt/airflow/sensor-data
    - ./config.ini:/opt/airflow/config.ini
    - ./.env:/opt/airflow/.env   
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog
    networks:
      - de_network

  broker_1:
    image: docker.io/bitnami/kafka:2.8.0
    container_name: broker_1
    depends_on:
      - zookeeper
    restart: unless-stopped
    ports:
      - 9091:9091
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://broker_1:19091,LISTENER_DOCKER_EXTERNAL://broker_1:9091
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker_1:19091,LISTENER_DOCKER_EXTERNAL://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_MESSAGE_MAX_BYTES: 20971520
    volumes:
      - ./kafka/broker_1/data:/var/lib/kafka/data
    networks:
      - de_network  

  broker_2:
    image: docker.io/bitnami/kafka:2.8.0
    container_name: broker_2
    depends_on:
      - zookeeper
    restart: unless-stopped
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://broker_2:29092,LISTENER_DOCKER_EXTERNAL://broker_2:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker_2:29092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_MESSAGE_MAX_BYTES: 20971520
    volumes:
      - ./kafka/broker_2/data:/var/lib/kafka/data
    networks:
      - de_network

  broker_3:
    image: docker.io/bitnami/kafka:2.8.0
    container_name: broker_3
    depends_on:
      - zookeeper
    restart: unless-stopped
    ports:
      - 9093:9093
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://broker_3:29093,LISTENER_DOCKER_EXTERNAL://broker_3:9093
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker_3:29093,LISTENER_DOCKER_EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_MESSAGE_MAX_BYTES: 20971520
    volumes:
      - ./kafka/broker_3/data:/var/lib/kafka/data
    networks:
      - de_network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafka_ui
    depends_on:
      - broker_1
      - broker_2
      - broker_3
    ports:
      - "9123:9123"
    environment:
      SERVER_PORT: 9123
      MANAGEMENT_SERVER_PORT: 9123
      KAFKA_BROKERCONNECT: broker_1:19091,broker_2:19092,broker_3:19093
    networks:
          - de_network

  postgres:
    container_name: co_psql
    image: postgres:16
    env_file:
      - .env
    volumes:
      - ./postgres_db/data:/var/lib/postgresql/data
      - ./postgres_db/logs:/var/log/postgresql
      - ./postgres_db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres_db/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5433:5432"
    restart: unless-stopped
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - de_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      retries: 5

  airflow-webserver:
    <<: *airflow-common
    container_name: webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - de_network

  airflow-scheduler:
    <<: *airflow-common
    container_name: scheduler
    command: scheduler
    networks:
      - de_network

  airflow-init:
    <<: *airflow-common
    container_name: init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - de_network

  mongodb:
    image: mongo:6-jammy
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - ./mongo/mongodb-data:/data/db/
      - ./mongo/mongodb-log:/var/log/mongodb/
    env_file:
      - .env
    networks:
      - de_network

networks:
    de_network:
      driver: bridge

volumes:
  data:
    driver: local
  logs:
    driver: local